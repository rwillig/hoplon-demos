(page "index.html"
  (:refer-hoplon :exclude [center])
  (:require
   [hoplon.google.jsapi.maps :as m :refer [google-map]]
   [hoplon.google.jsapi.loader     :refer [api-key]]
   [hoplon.twitter.bootstrap :as b :refer [container tab tabs]]))

(reset! api-key "AIzaSyA3SuTQQlfhLL0O--JS91QqUkKBJp6HE7g")

(def miami-beach   {:name "Miami Beach"   :lat 25.8130 :lon  -80.1341})
(def san-francisco {:name "San Francisco" :lat 37.7833 :lon -122.4167})

(defelem info [{:keys [title body]} _]
  (div :css {:height "100px" :width "300px"}
    (h4 title)
    (hr)
    (p body)))

(defn rand-pin [{:keys [name lat lon]}]
  (let [perturb!  #(. (+ % (* 0.030 (- (rand) 0.5))) (toFixed 4))
        icon      (str "icons/" (inc (rand-int 6)) "/number_" (rand-int 101) ".png")
        [lat lon] (map perturb! [lat lon])
        name      (str "A place in " name)
        content   (str "Coordinates: " lat "ºN, " lon "ºW.")]
    {:lat lat :lon lon :info (info :title name :body content) :opts {:icon icon}}))

(defn rand-pins [city n]
  (vec (take n (repeatedly #(rand-pin city)))))

(defn do-steps [msec [step & steps]]
  (with-timeout msec
    (when step (step))
    (when steps (do-steps msec steps))))

(defn bounce-marker [marker]
  (.setAnimation marker (.. js/google -maps -Animation -BOUNCE))
  (with-timeout 1400 (.setAnimation marker nil)))

(defc auto?     true)
(defc opts      {:zoom 8})
(defc pins      (rand-pins san-francisco 4))
(defc line-opts {:strokeColor "Black" :strokeWeight 1})
(defc= polyline [{:path pins :opts line-opts}])


(with-init!
  (with-timeout 1000
    (do-steps 1500
      [#(swap! line-opts assoc :strokeColor "Blue" :strokeWeight 3)
       #(swap! line-opts assoc :strokeColor "Red" :strokeWeight 2)
       #(swap! line-opts assoc :strokeColor "Green")
       #(swap! auto? not)
       #(swap! pins pop)
       #(swap! pins pop)
       #(swap! pins conj (rand-pin san-francisco))
       #(swap! pins conj (rand-pin san-francisco))
       #(swap! auto? not)
       #(do (swap! pins into (rand-pins miami-beach 5)) (swap! line-opts assoc :strokeOpacity 0.0))
       #(do (swap! pins subvec 4) (swap! line-opts assoc :strokeOpacity 1.0 :strokeColor "RoyalBlue"))])))

(html :lang "en"
  (head
    (title "Hoplon • Google Maps")
    (link :href "css/bootstrap.min.css" :rel "stylesheet")
    (link :href "css/bootstrap-theme.min.css" :rel "stylesheet"))
  (body
    (container
      (h1 "Hoplon & Google Maps")
      (hr)
      (tabs
        (tab :name "First Map"
          (google-map
            :css                  {:height "600px"
                                   :width  "100%"
                                   :margin "0 auto"
                                   :border "1px solid red"}
            ::m/center            san-francisco
            ::m/markers           pins
            ::m/polygons          polyline
            ::m/marker-click      #(bounce-marker %2)
            ::m/marker-rightclick #(.log js/console %1 %2 %3 %4 %5)
            ::m/map-click         #(.log js/console %1)
            ::m/map-rightclick    #(do (.log js/console %2) false)
            ::m/fit-pins          auto?
            ::m/opts              opts
            ::m/layer-bicycling   true))
        (tab :name "Second Map"
          (google-map
            :css                  {:height "600px"
                                   :width  "100%"
                                   :margin "0 auto"
                                   :border "1px solid blue"}
            ::m/center            san-francisco
            ::m/markers           @pins
            ::m/opts              {:zoom 12})))
      (hr)
      (p :css {:text-align "center"}
        (a :href "https://github.com/tailrecursion/hoplon-demos/blob/master/google-maps/src/index.cljs.hl" "source code")))))
